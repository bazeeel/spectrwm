#!/bin/sh

# Dmenu-based directory browser
# Dependency: dmenu; coreutils; xclip; dunst and notify-send

### OPTIONS AND VARIABLES
DMENUFM_PATH="$HOME/.config/dmenufm"
MAX_HIS_LENGTH=5000
CHOICE="placeholder"
TARGET="./"
BACKWARD="../"
ACTION="Actions"
FM_CP_PATH="CPP - Copy path"
FM_MK_DIR="MKD - Create new directory"
FM_MK_FILE="MKF - Create new text file"
FM_RM="RMM - Remove files / directory"
FM_TRASH="TRH - Trash of dmenufm"
FM_HIST="HIS - History of dmenufm"
FM_BMARK="BMK - Bookmark for dmenufm"
ACTLIST="$FM_CP_PATH:$FM_MK_DIR:$FM_MK_FILE:$FM_RM:$FM_TRASH:$FM_HIST:$FM_BMARK"

# Generate directories
# Variables cannot store multiline string, so transform to ':'
# Misbehaving due to space in file/directory name, so add ' at beginning and end.
menudir () {
	DIRs=$(for dir in *; do [ -d "$dir" ] && printf '%s:' "$dir/"; done | sed "1 s/^/'/; s/$/'/")
}

# Generate dotdirectories
# Delete extra ./ and ../ (Need use = as sed delimiter)
menudotdir () {
	DOTDIRs=$(for dir in .*; do [ -d "$dir" ] && printf '%s:' "$dir/"; done | sed "1 s/^/'/; s/$/'/; s=./==; s=../==")
}

# Generate files
menufile () {
	FILEs=$(for file in *; do [ -f "$file" ] && printf '%s:' "$file"; done | sed "1 s/^/'/; s/$/'/")
}

# Generate dotfiles
menudotfile () {
	DOTFILEs=$(for file in .*; do [ -f "$file" ] && printf '%s:' "$file"; done | sed "1 s/^/'/; s/$/'/")
}

# Generate default menu
menu () {
	menudir
	menudotdir
	menufile
	menudotfile
}

# Update menu in each move
update_menu () {
	list=
	# Rebuild list in every move
	for element in $keeplist; do
		case $element in
			DIRs) menudir && list="$list$DIRs" ;;
			FILEs) menufile && list="$list$FILEs" ;;
			DOTDIRs) menudotdir && list="$list$DOTDIRs" ;;
			DOTFILEs) menudotfile && list="$list$DOTFILEs" ;;
		esac
	done
}


# Store every move between directories into history
dmenufm_history () {
	[ ! -d "$DMENUFM_PATH" ] && mkdir -p "$DMENUFM_PATH"
	dirmark=$(printf '%s' "$PWD" | awk -F '/' '{print $NF}')
	printf '%s\n' "$dirmark - $PWD" | sed "/^$/ d" >> "$DMENUFM_PATH/dmenufm_history"
	# Limit the max number of history
	hisnum=$(wc -l "$DMENUFM_PATH/dmenufm_history" | awk '{print $1}')
	if [ "$hisnum" -ge "$MAX_HIS_LENGTH" ]; then
		sed -i "1d" "$DMENUFM_PATH/dmenufm_history"
	fi
}


# Prompt that used in dangerous action
dangerprompt () {
	# From Luke Smith
	# Use && command to execute the command after "Yes"
	[ "$(printf "No\\nYes" | dmenu -i -p "$1" -nb darkred -sb red -sf white -nf gray )" = "Yes" ]
}

# Generate menu for action choice, only for current directory.
Generate_action_menu () {
	while [ -n "$CHOICE" ]; do
		update_menu
		# Default menu list if no arguments given
		[ -z "$keeplist" ] && menu && list="$DIRs$FILEs$DOTDIRs$DOTFILEs"
		# Generate menu with/without arguments
		# Show only the current directory and one level of parent directory
		twopwd=$(printf '%s' "$PWD" | awk -F '/' '{print $(NF-1)"/"$NF}')
		CHOICE=$(printf '%s:' "$BACKWARD" "$TARGET" "$list" | tr ':' '\n' | sed "s/'//g; /^$/ d" | dmenu -i -l 10 -sb "#33691e" -p "$1")
		# Outcome matching
		if [ "$CHOICE" = "$TARGET" ]; then
			HERE=$(printf '%s' "$PWD")
			name=$(printf '%s' "$HERE" | awk -F '/' '{print $NF}')
			break
		elif [ "$CHOICE" = "$BACKWARD" ]; then
			cd "../" || return
			dmenufm_history
		elif [ -d "$CHOICE" ]; then
			cd "$CHOICE" || exit 1
			dmenufm_history
			continue
		elif [ -f "$CHOICE" ]; then
			HERE=$(printf '%s' "$PWD/$CHOICE")
			name=$(printf '%s' "$HERE" | awk -F '/' '{print $NF}')
		 	break
		else
			break
		fi
	done
}

# Actions that for dmenufm
dmenufm_action (){
	move=$(printf '%s:' "$ACTLIST" | tr ':' '\n' | dmenu -i -l 10 -p "Actions:")
	case $move in
		"$FM_CP_PATH")
			# Copy path to xclip, and send notification.
			Generate_action_menu "Copy directory/file path: "
			printf '%s' "$HERE" | xclip -selection clipboard
			notify-send "File path copied to clipboard."
			;;
		"$FM_MK_DIR")
			dirname=$(printf '%s' "" | dmenu -i -p "Enter Directory name: ")
			mkdir -p "$dirname" && notify-send "Directory $dirname created."
			;;
		"$FM_MK_FILE")
			filename=$(printf '%s' "" | dmenu -i -p "Enter plain text file name: ")
			touch "$filename"
			notify-send "File $filename created."
			printf '%s' "$PWD/$filename" | xargs -r -I {} dmenufm-open "{}"
			;;
		"$FM_RM")
			# Choose file/directory in current directory to remove
			Generate_action_menu "Remove file / directory: "
			if dangerprompt "Remove all files and/or subdirectories in $name?" && rm -rf "$HERE"; then
				notify-send "$name removed."
			else
				return
			fi

			;;
		"$FM_TRASH")
			[ ! -d "$DMENUFM_PATH/trash" ] && mkdir -p "$DMENUFM_PATH/trash"
			trashmenu=$(printf '%s:' "Move to trash" "Go to trash" "Empty trash" | tr ':' '\n' | sed "/^$/ d" | dmenu -i -l 20 -p "Dmenufm Trash")
			case $trashmenu in
				"Move to trash")
					Generate_action_menu "Move file/directory to trash: "
					# Check the chosen on is directory or not
					[ -d "$HERE" ] && result=$?
					# Say yes in dangerprompt, and send notification. Or do nothing.
					if dangerprompt "Move all files and/or subdirectories in $name to trash?" && mv "$HERE" "$DMENUFM_PATH/trash"; then
						if [ $result -eq 0 ]; then
							# If chosen one is directory, send notification and cd to parent directory
							notify-send "$name moved to trash."
							cd "../" || return
							# Reset result value
							result=
						else
							# If not, just send notification.
							notify-send "$name moved to trash."
						fi
					else
						return
					fi
					;;
				"Go to trash")
					cd "$DMENUFM_PATH/trash" || return
					;;
				"Empty trash")
					# Lesson: You cannot quote a wildcard. No quote on *.
					if dangerprompt "Remove all files and/or directory in trash?" && rm -rf "$DMENUFM_PATH/trash/"*; then
						notify-send "Trash is empty."
					else
						return
					fi
					;;
			esac
			;;
		"$FM_HIST")
			# tac is inverse of cat that cat out the content of history in a reverse way
			goto=$(tac "$DMENUFM_PATH/dmenufm_history" | dmenu -i -l 20 -p "Dmenufm History")
			destination=$(printf '%s' "$goto" | awk -F ' - ' '{print $2}')
			cd "$destination" || return
			;;
		"$FM_BMARK")
			bookmark=$(< "$DMENUFM_PATH/dmenufm_bookmark" tr '\n' ':')
			markmenu=$(printf '%s:' "$bookmark" "Add BMK" "Delete BMK" | tr ':' '\n' | sed "/^$/ d" | dmenu -i -l 20 -p "Dmenufm Bookmark")
			case "$markmenu" in
				"Add BMK")
					Generate_action_menu "Choose file/directory and add to BMK: "
					mark=$(printf '%s' "$HERE" | awk -F '/' '{print $NF}')
					printf '%s\n' "$mark - $HERE" >> "$DMENUFM_PATH/dmenufm_bookmark"
					sed -i "/^$/ d" "$DMENUFM_PATH/dmenufm_bookmark"
					;;
				"Delete BMK")
					delnum=$(cat -n "$DMENUFM_PATH/dmenufm_bookmark" | dmenu -i -l 10 -p "Delete chosen bmk: " | awk '{print $1}')
					sed -i "$delnum d" "$DMENUFM_PATH/dmenufm_bookmark"
					;;
				*)
					destination=$(printf '%s' "$markmenu" | awk -F ' - ' '{print $2}')
					cd "$destination" || printf '%s' "$HERE" | xargs -r -I {} dmenufm-open "{}"
					dmenufm_history
			esac
			;;
	esac
	dmenufm_menu
}

### MAIN FUNCTIONS

dmenufm_menu () {
	while [ -n "$CHOICE" ]; do
		update_menu
		# Default menu list if no arguments given
		[ -z "$keeplist" ] && menu && list="$DIRs$FILEs$DOTDIRs$DOTFILEs"
		# Generate menu with/without arguments
		# Show only the current directory and one level of parent directory
		twopwd=$(printf '%s' "$PWD" | awk -F '/' '{print $(NF-1)"/"$NF}')
		CHOICE=$(printf '%s:' "$BACKWARD" "$TARGET" "$ACTION" "$list" | tr ':' '\n' | sed "s/'//g; /^$/ d" | dmenu -i -l 10 -p "$twopwd")
		# Outcome matching
		if [ "$CHOICE" = "$TARGET" ]; then
			printf '%s' "$PWD" | xargs -r -I {} dmenufm-open "{}"
			break
		elif [ "$CHOICE" = "$BACKWARD" ]; then
			cd "../"
			dmenufm_history
		elif [ "$CHOICE" = "$ACTION" ]; then
			dmenufm_action
			break
		elif [ -d "$CHOICE" ]; then
			cd "$CHOICE" || exit 1
			dmenufm_history
			continue
		elif [ -f "$CHOICE" ]; then
		 	printf '%s' "$PWD/$CHOICE" | xargs -r -I {} dmenufm-open "{}"
		 	break
		else
			break
		fi
	done
}

### ARGUMENTS

while [ -n "$1" ]; do
	case $1 in
		"-d"|"--directory" )
			keeplist="${keeplist} DIRs"
			;;
		"-f"|"--file" )
			keeplist="${keeplist} FILEs"
			;;
		"-D"|"--dotdirectory" )
			keeplist="${keeplist} DOTDIRs"
			;;
		"-F"|"--dotfile" )
			keeplist="${keeplist} DOTFILEs"
			;;
		"-h"|"--help" )
			printf "Optional arguments for custom use:
			-d | --directory: menu is directories, no input
			-f | --file: menu is files, no input
			-D | --dotdirectory: menu is hidden directories, no input
			-F | --dotfile: menu is hidden files, no input
			-h | --help: Show this message\\n"
			exit 0
			;;
		"*" )
			printf "Invalid option"
			exit 1
			;;
	esac
	shift
done

### RUN THE MAIN FUNCTION
dmenufm_menu
